{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/audio-worklet-processors/getParameterValue.js","webpack:///./src/audio-worklet-processors/noise.js","webpack:///./src/audio-worklet-processors/inverse-gain.js","webpack:///./src/audio-worklet-processors/getEnvelopeValue.js","webpack:///./src/audio-worklet-processors/linear-change.js","webpack:///./src/audio-worklet-processors/envelope-generator.js","webpack:///./src/audio-worklet-processors/crush-bit-fixed-point.js","webpack:///./src/audio-worklet-processors/bit-crusher-fixed-point.js","webpack:///./src/audio-worklet-processors/divide-clock-ticks.js","webpack:///./src/audio-worklet-processors/clock-divider.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getParameterValue","parameter","minValue","maxValue","sampleNumber","clampValue","input","clamp","length","getParamValue","getNextValue","previousValue","stepMin","stepMax","stepSize","Math","random","registerProcessor","AudioWorkletProcessor","defaultValue","automationRate","super","this","samplesHeld","isTriggerValueHigh","port","onmessage","handleMessage","manualTriggerOn","triggerChangeMessage","type","event","data","inputs","outputs","parameters","output","getStepMin","getStepMax","getSampleHold","sampleHold","getNextValueTrigger","nextValueTrigger","triggerValue","postMessage","channel","getDivisor","divisor","getZeroDivisorOutput","zeroDivisorFallback","channelIndex","inputChannel","outputChannel","sampleIndex","inputSample","getEnvelopeValue","getValueAtTime","sampleRate","attackTime","attackValue","holdTime","decayTime","sustainValue","releaseTime","secondsSinceStateTransition","stage","valueOnTriggerChange","sampleTime","undefined","stageProgress","outputValue","startValue","startTime","endValue","endTime","currentTime","options","state","previousTriggerValue","stateMessage","outputCache","getTriggerValue","trigger","getAttackTime","getAttackValue","getHoldTime","getDecayTime","getSustainValue","getReleaseTime","crush","sample","bitDepth","fractionalDepthMode","floor","numberOfSteps","max","fractionalBitDepthMode","newMode","getBitDepth","clockInTriggerStages","attack","high","release","low","clockStages","tick","tock","resetTriggerStages","reset","keepGoing","divideClockTicks","attackAfterTicks","releaseAfterTocks","ticksOnReset","tocksOnReset","clockInStage","resetTriggerStage","tocksPast","ticksPast","userParams","initialReset","manualClockTriggerOn","manualResetTriggerOn","clockTriggerOn","resetTriggerOn","clockTriggerChangeMessage","resetTriggerChangeMessage","getClockTriggerValue","clockTrigger","getResetTriggerValue","resetTrigger","getAttackAfterTicks","getReleaseAfterTocks","getTicksOnReset","getTocksOnReset","clockTriggerValue","resetTriggerValue","clockTriggerStage"],"mappings":"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","file":"worklets.d60736034a62e7acef43.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./assets/audio-worklet-processors\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const clamp = (minValue, maxValue) => input =>\r\n  input < minValue ? minValue : input > maxValue ? maxValue : input;\r\n\r\nexport const getParameterValue = (parameter, minValue, maxValue) => sampleNumber => {\r\n  const clampValue = clamp(minValue, maxValue);\r\n  if (parameter.length > 1) {\r\n    return clampValue(parameter[sampleNumber]);\r\n  }\r\n  return clampValue(parameter[0]);\r\n};\r\n","import { getParameterValue } from './getParameterValue';\r\n\r\nconst getParamValue = getParameterValue;\r\n\r\nconst getNextValue = (previousValue, stepMin, stepMax) => {\r\n  const stepSize = Math.random() * (stepMax - stepMin) + stepMin;\r\n  const preferUp = Math.random() > 0.5;\r\n  if (preferUp) {\r\n    return previousValue + stepSize > 1 ? previousValue - stepSize : previousValue + stepSize;\r\n  } else {\r\n    return previousValue - stepSize < -1 ? previousValue + stepSize : previousValue - stepSize;\r\n  }\r\n};\r\n\r\nregisterProcessor(\r\n  'noise',\r\n  class Noise extends AudioWorkletProcessor {\r\n    static get parameterDescriptors() {\r\n      return [\r\n        {\r\n          name: 'stepMax',\r\n          defaultValue: 1,\r\n          minValue: 0,\r\n          maxValue: 1,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'stepMin',\r\n          defaultValue: 0,\r\n          minValue: 0,\r\n          maxValue: 1,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'sampleHold',\r\n          defaultValue: 1,\r\n          minValue: 0,\r\n          maxValue: 1000000,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'nextValueTrigger',\r\n          defaultValue: 0,\r\n          automationRate: 'a-rate'\r\n        }\r\n      ];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      // initializing to zero means max and min of 1 behaves differently on initial load\r\n      // start unbalanced so there is only one option for next sample in that case\r\n      this.previousValue = 0.1;\r\n      this.samplesHeld = 0;\r\n      this.isTriggerValueHigh = false;\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n      this.manualTriggerOn = false;\r\n      this.triggerChangeMessage = { type: 'trigger-change', value: false };\r\n    }\r\n\r\n    handleMessage(event) {\r\n      if (event.data && event.data.type === 'manual-trigger') {\r\n        this.manualTriggerOn = event.data.value;\r\n      }\r\n    }\r\n\r\n    process(inputs, outputs, parameters) {\r\n      // Get the first output.\r\n      let output = outputs[0];\r\n      this.getStepMin = getParamValue(parameters.stepMin, 0, 1);\r\n      this.getStepMax = getParamValue(parameters.stepMax, 0, 1);\r\n      this.getSampleHold = getParamValue(parameters.sampleHold, 0, 1000000);\r\n\r\n      this.getNextValueTrigger = this.manualTriggerOn\r\n        ? () => 1e9\r\n        : getParamValue(parameters.nextValueTrigger, 0, 1);\r\n\r\n      for (let i = 0; i < output[0].length; ++i, ++this.samplesHeld) {\r\n        // recover from overflow\r\n        if (this.samplesHeld < 0) {\r\n          this.samplesHeld = 0;\r\n        }\r\n\r\n        const sampleHold = this.getSampleHold(i);\r\n\r\n        // keep playing previous sample forever if sampleHold < 1\r\n        if (sampleHold >= 1 && this.samplesHeld >= sampleHold) {\r\n          this.samplesHeld -= sampleHold;\r\n          this.previousValue = getNextValue(\r\n            this.previousValue,\r\n            this.getStepMin(i),\r\n            this.getStepMax(i)\r\n          );\r\n        }\r\n        const triggerValue = this.getNextValueTrigger(i);\r\n        if (this.isTriggerValueHigh != triggerValue > 0) {\r\n          this.triggerChangeMessage.value = triggerValue > 0;\r\n          this.port.postMessage(this.triggerChangeMessage);\r\n        }\r\n        if (!this.isTriggerValueHigh && triggerValue > 0) {\r\n          this.previousValue = getNextValue(\r\n            this.previousValue,\r\n            this.getStepMin(i),\r\n            this.getStepMax(i)\r\n          );\r\n        }\r\n        this.isTriggerValueHigh = triggerValue > 0;\r\n        for (let channel = 0; channel < output.length; ++channel) {\r\n          output[channel][i] = this.previousValue;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n);\r\n","import { getParameterValue } from \"./getParameterValue\";\r\n\r\nconst getParamValue = getParameterValue;\r\n\r\nregisterProcessor(\r\n  'inverse-gain',\r\n  class Noise extends AudioWorkletProcessor {\r\n    static get parameterDescriptors() {\r\n      return [\r\n        {\r\n          name: 'divisor',\r\n          defaultValue: 10,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'zeroDivisorFallback',\r\n          defaultValue: 0,\r\n          automationRate: 'a-rate'\r\n        }\r\n      ];\r\n    }\r\n\r\n    process(inputs, outputs, parameters) {\r\n      // Only one input and output.\r\n      let input = inputs[0];\r\n      let output = outputs[0];\r\n      this.getDivisor = getParamValue(parameters.divisor, -1e9, 1e9);\r\n      this.getZeroDivisorOutput = getParamValue(parameters.zeroDivisorFallback, -1e9, 1e9);\r\n\r\n      for (let channelIndex = 0; channelIndex < input.length; channelIndex++) {\r\n        const inputChannel = input[channelIndex];\r\n        const outputChannel = output[channelIndex];\r\n        for (\r\n          let sampleIndex = 0;\r\n          sampleIndex < inputChannel.length;\r\n          sampleIndex++\r\n        ) {\r\n          const inputSample = inputChannel[sampleIndex];\r\n          const divisor = this.getDivisor(sampleIndex);\r\n          if (divisor === 0) {\r\n            outputChannel[sampleIndex] = this.getZeroDivisorOutput(sampleIndex);\r\n          } else {\r\n            outputChannel[sampleIndex] = inputSample / divisor;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n);\r\n","export const restStage = 0;\r\nexport const attackStage = 1;\r\nexport const holdStage = 2;\r\nexport const decayStage = 3;\r\nexport const sustainStage = 4;\r\nexport const releaseStage = 5;\r\n// ASSUMPTION: this will be called every sample, so it's safe to always advance time by one sample\r\n// returns the value at end of the sample, so if attack time is 0, attack value will be returned on the sample of the recieved trigger\r\nexport const getEnvelopeValue = (\r\n  getValueAtTime,\r\n  sampleRate,\r\n  { attackTime, attackValue, holdTime, decayTime, sustainValue, releaseTime },\r\n  secondsSinceStateTransition,\r\n  stage,\r\n  triggerValue,\r\n  valueOnTriggerChange,\r\n  output = {}\r\n) => {\r\n  const sampleTime = 1 / sampleRate;\r\n  output.stage = stage;\r\n  output.secondsSinceStateTransition = undefined;\r\n  output.stageProgress = 0;\r\n  output.valueOnTriggerChange = undefined;\r\n  output.outputValue = undefined;\r\n  if (stage === restStage) {\r\n    if (triggerValue <= 0) {\r\n      output.stage = restStage;\r\n      output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime;\r\n      output.outputValue = 0;\r\n    } else {\r\n      if (sampleTime < attackTime) {\r\n        output.stage = attackStage;\r\n        output.secondsSinceStateTransition = sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / attackTime;\r\n        output.valueOnTriggerChange = 0;\r\n        output.outputValue = getValueAtTime(\r\n          0,\r\n          0,\r\n          attackValue,\r\n          attackTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else if (sampleTime - attackTime < holdTime) {\r\n        output.stage = holdStage;\r\n        output.secondsSinceStateTransition = sampleTime - attackTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / holdTime;\r\n        output.outputValue = attackValue;\r\n      } else if (sampleTime - attackTime - holdTime < decayTime) {\r\n        output.stage = decayStage;\r\n        output.secondsSinceStateTransition = sampleTime - attackTime - holdTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / decayTime;\r\n        output.outputValue = getValueAtTime(\r\n          attackValue,\r\n          0,\r\n          sustainValue,\r\n          decayTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = sustainStage;\r\n        output.secondsSinceStateTransition = sampleTime - attackTime - holdTime - decayTime;\r\n        output.outputValue = sustainValue;\r\n      }\r\n    }\r\n  }\r\n  if (stage === attackStage) {\r\n    if (triggerValue <= 0) {\r\n      if (sampleTime < releaseTime) {\r\n        output.stage = releaseStage;\r\n        output.secondsSinceStateTransition = sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / releaseTime;\r\n        if (secondsSinceStateTransition < attackTime) {\r\n          output.valueOnTriggerChange = getValueAtTime(\r\n            valueOnTriggerChange || 0,\r\n            0,\r\n            attackValue,\r\n            attackTime,\r\n            secondsSinceStateTransition\r\n          );\r\n        } else if (secondsSinceStateTransition - attackTime < holdTime) {\r\n          output.valueOnTriggerChange = attackValue;\r\n        } else if (secondsSinceStateTransition - attackTime - holdTime < decayTime) {\r\n          output.valueOnTriggerChange = getValueAtTime(\r\n            attackValue,\r\n            0,\r\n            sustainValue,\r\n            decayTime,\r\n            secondsSinceStateTransition - attackTime - holdTime\r\n          );\r\n        } else {\r\n          output.valueOnTriggerChange = sustainValue;\r\n        }\r\n        output.outputValue = getValueAtTime(\r\n          output.valueOnTriggerChange,\r\n          0,\r\n          0,\r\n          releaseTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = restStage;\r\n        output.secondsSinceStateTransition = sampleTime - releaseTime;\r\n        output.outputValue = 0;\r\n      }\r\n    } else {\r\n      if (secondsSinceStateTransition + sampleTime < attackTime) {\r\n        output.stage = attackStage;\r\n        output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / attackTime;\r\n        output.valueOnTriggerChange = valueOnTriggerChange;\r\n        output.outputValue = getValueAtTime(\r\n          valueOnTriggerChange || 0,\r\n          0,\r\n          attackValue,\r\n          attackTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else if (secondsSinceStateTransition + sampleTime - attackTime < holdTime) {\r\n        output.stage = holdStage;\r\n        output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime - attackTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / holdTime;\r\n        output.outputValue = attackValue;\r\n      } else if (secondsSinceStateTransition + sampleTime - attackTime - holdTime < decayTime) {\r\n        output.stage = decayStage;\r\n        output.secondsSinceStateTransition =\r\n          secondsSinceStateTransition + sampleTime - attackTime - holdTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / decayTime;\r\n        output.outputValue = getValueAtTime(\r\n          attackValue,\r\n          0,\r\n          sustainValue,\r\n          decayTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = sustainStage;\r\n        output.secondsSinceStateTransition =\r\n          secondsSinceStateTransition + sampleTime - attackTime - holdTime - decayTime;\r\n        output.outputValue = sustainValue;\r\n      }\r\n    }\r\n  }\r\n  if (stage === holdStage) {\r\n    if (triggerValue <= 0) {\r\n      if (sampleTime < releaseTime) {\r\n        output.stage = releaseStage;\r\n        output.secondsSinceStateTransition = sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / releaseTime;\r\n        if (secondsSinceStateTransition < holdTime) {\r\n          output.valueOnTriggerChange = attackValue;\r\n        } else if (secondsSinceStateTransition - holdTime < decayTime) {\r\n          output.valueOnTriggerChange = getValueAtTime(\r\n            attackValue,\r\n            0,\r\n            sustainValue,\r\n            decayTime,\r\n            secondsSinceStateTransition - holdTime\r\n          );\r\n        } else {\r\n          output.valueOnTriggerChange = sustainValue;\r\n        }\r\n        output.outputValue = getValueAtTime(\r\n          output.valueOnTriggerChange,\r\n          0,\r\n          0,\r\n          releaseTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = restStage;\r\n        output.secondsSinceStateTransition = sampleTime - releaseTime;\r\n        output.outputValue = 0;\r\n      }\r\n    } else {\r\n      if (secondsSinceStateTransition + sampleTime < holdTime) {\r\n        output.stage = holdStage;\r\n        output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / holdTime;\r\n        output.outputValue = attackValue;\r\n      } else if (secondsSinceStateTransition + sampleTime - holdTime < decayTime) {\r\n        output.stage = decayStage;\r\n        output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime - holdTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / decayTime;\r\n        output.outputValue = getValueAtTime(\r\n          attackValue,\r\n          0,\r\n          sustainValue,\r\n          decayTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = sustainStage;\r\n        output.secondsSinceStateTransition =\r\n          secondsSinceStateTransition + sampleTime - holdTime - decayTime;\r\n        output.outputValue = sustainValue;\r\n      }\r\n    }\r\n  }\r\n  if (stage === decayStage) {\r\n    if (triggerValue <= 0) {\r\n      if (sampleTime < releaseTime) {\r\n        output.stage = releaseStage;\r\n        output.secondsSinceStateTransition = sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / releaseTime;\r\n        if (secondsSinceStateTransition < decayTime) {\r\n          output.valueOnTriggerChange = getValueAtTime(\r\n            attackValue,\r\n            0,\r\n            sustainValue,\r\n            decayTime,\r\n            secondsSinceStateTransition\r\n          );\r\n        } else {\r\n          output.valueOnTriggerChange = sustainValue;\r\n        }\r\n        output.outputValue = getValueAtTime(\r\n          output.valueOnTriggerChange,\r\n          0,\r\n          0,\r\n          releaseTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = restStage;\r\n        output.secondsSinceStateTransition = sampleTime - releaseTime;\r\n        output.outputValue = 0;\r\n      }\r\n    } else {\r\n      if (secondsSinceStateTransition + sampleTime < decayTime) {\r\n        output.stage = decayStage;\r\n        output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / decayTime;\r\n        output.outputValue = getValueAtTime(\r\n          attackValue,\r\n          0,\r\n          sustainValue,\r\n          decayTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = sustainStage;\r\n        output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime - decayTime;\r\n        output.outputValue = sustainValue;\r\n      }\r\n    }\r\n  }\r\n  if (stage === sustainStage) {\r\n    if (triggerValue <= 0) {\r\n      if (sampleTime < releaseTime) {\r\n        output.stage = releaseStage;\r\n        output.secondsSinceStateTransition = sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / releaseTime;\r\n        output.valueOnTriggerChange = sustainValue;\r\n        output.outputValue = getValueAtTime(\r\n          output.valueOnTriggerChange,\r\n          0,\r\n          0,\r\n          releaseTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = restStage;\r\n        output.secondsSinceStateTransition = sampleTime - releaseTime;\r\n        output.outputValue = 0;\r\n      }\r\n    } else {\r\n      output.stage = sustainStage;\r\n      output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime;\r\n      output.outputValue = sustainValue;\r\n    }\r\n  }\r\n  if (stage === releaseStage) {\r\n    if (triggerValue <= 0) {\r\n      if (secondsSinceStateTransition + sampleTime < releaseTime) {\r\n        output.stage = releaseStage;\r\n        output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / releaseTime;\r\n        output.valueOnTriggerChange = valueOnTriggerChange;\r\n        output.outputValue = getValueAtTime(\r\n          output.valueOnTriggerChange,\r\n          0,\r\n          0,\r\n          releaseTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = restStage;\r\n        output.secondsSinceStateTransition = secondsSinceStateTransition + sampleTime - releaseTime;\r\n        output.outputValue = 0;\r\n      }\r\n    } else {\r\n      if (sampleTime < attackTime) {\r\n        output.stage = attackStage;\r\n        output.secondsSinceStateTransition = sampleTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / attackTime;\r\n        output.valueOnTriggerChange = getValueAtTime(\r\n          valueOnTriggerChange || 0,\r\n          0,\r\n          0,\r\n          releaseTime,\r\n          secondsSinceStateTransition\r\n        );\r\n        output.outputValue = getValueAtTime(\r\n          output.valueOnTriggerChange,\r\n          0,\r\n          attackValue,\r\n          attackTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else if (sampleTime - attackTime < holdTime) {\r\n        output.stage = holdStage;\r\n        output.secondsSinceStateTransition = sampleTime - attackTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / holdTime;\r\n        output.outputValue = attackValue;\r\n      } else if (sampleTime - attackTime - holdTime < decayTime) {\r\n        output.stage = decayStage;\r\n        output.secondsSinceStateTransition = sampleTime - attackTime - holdTime;\r\n        output.stageProgress = output.secondsSinceStateTransition / decayTime;\r\n        output.outputValue = getValueAtTime(\r\n          attackValue,\r\n          0,\r\n          sustainValue,\r\n          decayTime,\r\n          output.secondsSinceStateTransition\r\n        );\r\n      } else {\r\n        output.stage = sustainStage;\r\n        output.secondsSinceStateTransition = sampleTime - attackTime - holdTime - decayTime;\r\n        output.outputValue = sustainValue;\r\n      }\r\n    }\r\n  }\r\n  return output;\r\n};\r\n","export function getValueAtTime(\r\n  startValue,\r\n  startTime,\r\n  endValue,\r\n  endTime,\r\n  currentTime\r\n) {\r\n  if (startTime >= endTime) {\r\n    startTime = endTime;\r\n  }\r\n  if (currentTime >= endTime) {\r\n    return endValue;\r\n  }\r\n  if (currentTime <= startTime) {\r\n    return startValue;\r\n  }\r\n\r\n  const gradient = (endValue - startValue) / (endTime - startTime);\r\n  return startValue + (currentTime - startTime) * gradient;\r\n}\r\n","import { getParameterValue } from './getParameterValue';\r\nimport { getEnvelopeValue, restStage } from './getEnvelopeValue';\r\nimport { getValueAtTime } from './linear-change';\r\n\r\nconst getParamValue = getParameterValue;\r\n\r\nregisterProcessor(\r\n  'envelope-generator',\r\n  class EnvelopeGenerator extends AudioWorkletProcessor {\r\n    static get parameterDescriptors() {\r\n      return [\r\n        {\r\n          name: 'trigger',\r\n          defaultValue: 0,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'attackValue',\r\n          defaultValue: 1,\r\n          minValue: 0,\r\n          maxValue: 1,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'attackTime',\r\n          defaultValue: 0.001,\r\n          minValue: 0,\r\n          maxValue: 10,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'holdTime',\r\n          minValue: 0,\r\n          defaultValue: 0.0625,\r\n          maxValue: 10,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'decayTime',\r\n          defaultValue: 0.125,\r\n          minValue: 0,\r\n          maxValue: 10,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'sustainValue',\r\n          defaultValue: 0.25,\r\n          minValue: 0,\r\n          maxValue: 1,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'releaseTime',\r\n          defaultValue: 0.25,\r\n          minValue: 0,\r\n          maxValue: 10\r\n        }\r\n      ];\r\n    }\r\n\r\n    constructor(options) {\r\n      super(options);\r\n      this.stage = restStage;\r\n      // stageProgress advances from 0 to 1 to show progress of stage\r\n      this.stageProgress = 0;\r\n      this.secondsSinceStateTransition = 0;\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n      this.state = {\r\n        attackTime: 0.001,\r\n        attackValue: 1,\r\n        holdTime: 0.0625,\r\n        decayTime: 0.125,\r\n        sustainValue: 0.25,\r\n        releaseTime: 0.25\r\n      };\r\n      this.sampleRate = options.sampleRate || 44100;\r\n      this.outputValue = 0;\r\n      this.valueOnTriggerChange = undefined;\r\n      this.manualTriggerOn = false;\r\n      this.previousTriggerValue = 0;\r\n      this.stateMessage = {\r\n        type: 'state',\r\n        state: {\r\n          stage: this.stage,\r\n          stageProgress: this.stageProgress,\r\n          outputValue: this.outputValue\r\n        }\r\n      };\r\n      this.triggerChangeMessage = { type: 'trigger-change', value: false };\r\n      this.outputCache = {\r\n        stage: undefined,\r\n        secondsSinceStateTransition: undefined,\r\n        stageProgress: 0,\r\n        valueOnTriggerChange: undefined,\r\n        outputValue: undefined\r\n      };\r\n    }\r\n\r\n    handleMessage(event) {\r\n      if (event.data && event.data.type === 'getState') {\r\n        this.stateMessage.state.stage = this.stage;\r\n        this.stateMessage.state.stageProgress = this.stageProgress;\r\n        this.stateMessage.state.outputValue = this.outputValue;\r\n        this.port.postMessage(this.stateMessage);\r\n      }\r\n      if (event.data && event.data.type === 'manual-trigger') {\r\n        this.manualTriggerOn = event.data.value;\r\n      }\r\n    }\r\n\r\n    process(inputs, outputs, parameters) {\r\n      // Only one output.\r\n      let output = outputs[0];\r\n      this.getTriggerValue = this.manualTriggerOn\r\n        ? () => 1e9\r\n        : getParamValue(parameters.trigger, -1e9, 1e9);\r\n      this.getAttackTime = getParamValue(parameters.attackTime, 0, 10);\r\n      this.getAttackValue = getParamValue(parameters.attackValue, 0, 1);\r\n      this.getHoldTime = getParamValue(parameters.holdTime, 0, 10);\r\n      this.getDecayTime = getParamValue(parameters.decayTime, 0, 10);\r\n      this.getSustainValue = getParamValue(parameters.sustainValue, 0, 1);\r\n      this.getReleaseTime = getParamValue(parameters.releaseTime, 0, 10);\r\n\r\n      for (let sampleIndex = 0; sampleIndex < output[0].length; sampleIndex++) {\r\n        this.state.attackTime = this.getAttackTime(sampleIndex);\r\n        this.state.attackValue = this.getAttackValue(sampleIndex);\r\n        this.state.holdTime = this.getHoldTime(sampleIndex);\r\n        this.state.decayTime = this.getDecayTime(sampleIndex);\r\n        this.state.sustainValue = this.getSustainValue(sampleIndex);\r\n        this.state.releaseTime = this.getReleaseTime(sampleIndex);\r\n        const triggerValue = this.getTriggerValue(sampleIndex);\r\n\r\n        if (triggerValue > 0 != this.previousTriggerValue > 0) {\r\n          this.triggerChangeMessage.value = triggerValue > 0;\r\n          this.port.postMessage(this.triggerChangeMessage);\r\n        }\r\n\r\n        // mutates this.outputCache\r\n        getEnvelopeValue(\r\n          getValueAtTime,\r\n          this.sampleRate,\r\n          this.state,\r\n          this.secondsSinceStateTransition,\r\n          this.stage,\r\n          triggerValue,\r\n          this.valueOnTriggerChange,\r\n          this.outputCache\r\n        );\r\n        this.stage = this.outputCache.stage;\r\n        this.stageProgress = this.outputCache.stageProgress;\r\n        this.secondsSinceStateTransition = this.outputCache.secondsSinceStateTransition;\r\n        this.outputValue = this.outputCache.outputValue;\r\n        this.valueOnTriggerChange = this.outputCache.valueOnTriggerChange;\r\n        this.previousTriggerValue = triggerValue;\r\n\r\n        // only expecting one channel, but tolerating more in case\r\n        for (let channelIndex = 0; channelIndex < output.length; channelIndex++) {\r\n          output[channelIndex][sampleIndex] = this.outputValue;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n);\r\n","// based on https://webaudio.github.io/web-audio-api/#the-bitcrusher-node\r\nexport function crush(sample, bitDepth, fractionalDepthMode) {\r\n  if (bitDepth > 32) bitDepth = 32;\r\n  if (bitDepth < 1) bitDepth = 1;\r\n  if (fractionalDepthMode === 'trve') {\r\n    bitDepth = Math.floor(bitDepth);\r\n  }\r\n  let numberOfSteps = 2 ** bitDepth;\r\n  if (fractionalDepthMode === 'quantize-evenly') {\r\n    numberOfSteps = Math.floor(numberOfSteps);\r\n  }\r\n  const stepSize = 2 / numberOfSteps;\r\n  const max = 1 - stepSize;\r\n  if (sample >= max) return max;\r\n  if (sample <= -1) return -1;\r\n\r\n  return -1 + Math.floor((1 + sample) / stepSize) * stepSize;\r\n}\r\n","import { crush } from './crush-bit-fixed-point';\r\nimport { getParameterValue } from './getParameterValue';\r\n\r\nconst getParamValue = getParameterValue;\r\n\r\nregisterProcessor(\r\n  'bit-crusher-fixed-point',\r\n  class Noise extends AudioWorkletProcessor {\r\n    static get parameterDescriptors() {\r\n      return [\r\n        {\r\n          name: 'bitDepth',\r\n          defaultValue: 8,\r\n          minValue: 1,\r\n          maxValue: 32,\r\n          automationRate: 'a-rate'\r\n        }\r\n      ];\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.fractionalBitDepthMode = 'quantize-evenly';\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n    }\r\n\r\n    handleMessage(event) {\r\n      if (event.data && event.data.type === 'change-fractional-bit-depth-mode') {\r\n        this.fractionalBitDepthMode = event.data.newMode;\r\n      }\r\n    }\r\n\r\n    process(inputs, outputs, parameters) {\r\n      // Only one input and output.\r\n      let input = inputs[0];\r\n      let output = outputs[0];\r\n      this.getBitDepth = getParamValue(parameters.bitDepth, 1, 32);\r\n\r\n      for (let channelIndex = 0; channelIndex < input.length; channelIndex++) {\r\n        const inputChannel = input[channelIndex];\r\n        const outputChannel = output[channelIndex];\r\n        for (let sampleIndex = 0; sampleIndex < inputChannel.length; sampleIndex++) {\r\n          const inputSample = inputChannel[sampleIndex];\r\n          outputChannel[sampleIndex] = crush(\r\n            inputSample,\r\n            this.getBitDepth(sampleIndex),\r\n            this.fractionalBitDepthMode\r\n          );\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n);\r\n","export const clockInTriggerStages = {\r\n  attack: 1,\r\n  high: 2,\r\n  release: 3,\r\n  low: 4\r\n};\r\n\r\nexport const clockStages = {\r\n  tick: 1,\r\n  tock: 0\r\n};\r\n\r\nexport const resetTriggerStages = {\r\n  reset: 1,\r\n  keepGoing: 0\r\n};\r\n\r\nexport function divideClockTicks(\r\n  state, // { stage, ticksPast, tocksPast },\r\n  { attackAfterTicks, releaseAfterTocks, ticksOnReset, tocksOnReset },\r\n  clockInStage,\r\n  resetTriggerStage\r\n) {\r\n  if (resetTriggerStage === resetTriggerStages.reset) {\r\n    state.stage = clockStages.tock;\r\n    state.tocksPast = tocksOnReset;\r\n    state.ticksPast = ticksOnReset;\r\n  }\r\n  if (clockInStage === clockInTriggerStages.attack && state.stage === clockStages.tock) {\r\n    state.ticksPast++;\r\n    if (state.ticksPast >= attackAfterTicks) {\r\n      state.stage = clockStages.tick;\r\n      state.ticksPast -= attackAfterTicks;\r\n    }\r\n  }\r\n  if (clockInStage === clockInTriggerStages.release && state.stage === clockStages.tick) {\r\n    state.tocksPast++;\r\n    if (state.tocksPast >= releaseAfterTocks) {\r\n      state.stage = clockStages.tock;\r\n      state.tocksPast -= releaseAfterTocks;\r\n    }\r\n  }\r\n  return state;\r\n}\r\n","import {\r\n  clockInTriggerStages,\r\n  clockStages,\r\n  divideClockTicks,\r\n  resetTriggerStages\r\n} from './divide-clock-ticks';\r\nimport { getParameterValue } from './getParameterValue';\r\n\r\n// Webpack turns function imports into object constructor calls\r\n// local assignment prevents many object constructor calls\r\nconst getParamValue = getParameterValue;\r\n\r\nregisterProcessor(\r\n  'clock-divider',\r\n  class ClockDivider extends AudioWorkletProcessor {\r\n    static get parameterDescriptors() {\r\n      return [\r\n        {\r\n          name: 'clockTrigger',\r\n          defaultValue: 0,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'resetTrigger',\r\n          defaultValue: 0,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'attackAfterTicks',\r\n          defaultValue: 1,\r\n          minValue: 1,\r\n          maxValue: 1e9,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'releaseAfterTocks',\r\n          defaultValue: 1,\r\n          minValue: 1,\r\n          maxValue: 1e9,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'ticksOnReset',\r\n          defaultValue: 0,\r\n          minValue: -1e9,\r\n          maxValue: 1e9,\r\n          automationRate: 'a-rate'\r\n        },\r\n        {\r\n          name: 'tocksOnReset',\r\n          defaultValue: 0,\r\n          minValue: -1e9,\r\n          maxValue: 1e9,\r\n          automationRate: 'a-rate'\r\n        }\r\n      ];\r\n    }\r\n    constructor(options) {\r\n      super(options);\r\n      this.state = {\r\n        stage: clockStages.tock,\r\n        // will be set according to params on reset\r\n        ticksPast: 0,\r\n        tocksPast: 0\r\n      };\r\n      this.userParams = {\r\n        attackAfterTicks: 0,\r\n        releaseAfterTocks: 0,\r\n        ticksOnReset: 0,\r\n        tocksOnReset: 0\r\n      };\r\n      this.initialReset = true;\r\n      this.port.onmessage = this.handleMessage.bind(this);\r\n      this.manualClockTriggerOn = false;\r\n      this.manualResetTriggerOn = false;\r\n      this.clockTriggerOn = false;\r\n      this.resetTriggerOn = false;\r\n      this.clockTriggerChangeMessage = { type: 'clock-trigger-change', value: false };\r\n      this.resetTriggerChangeMessage = { type: 'reset-trigger-change', value: false };\r\n    }\r\n\r\n    handleMessage(event) {\r\n      if (event.data && event.data.type === 'manual-clock-trigger') {\r\n        this.manualClockTriggerOn = event.data.value;\r\n      }\r\n      if (event.data && event.data.type === 'manual-reset-trigger') {\r\n        this.manualResetTriggerOn = event.data.value;\r\n      }\r\n    }\r\n\r\n    process(inputs, outputs, parameters) {\r\n      const output = outputs[0];\r\n\r\n      this.getClockTriggerValue = this.manualClockTriggerOn\r\n        ? () => 1e9\r\n        : getParamValue(parameters.clockTrigger, -1e9, 1e9);\r\n      this.getResetTriggerValue =\r\n        this.manualResetTriggerOn || this.initialReset\r\n          ? () => {\r\n              this.initialReset = false;\r\n              return 1e9;\r\n            }\r\n          : getParamValue(parameters.resetTrigger, -1e9, 1e9);\r\n      this.getAttackAfterTicks = getParamValue(parameters.attackAfterTicks, 1, 1e9);\r\n      this.getReleaseAfterTocks = getParamValue(parameters.releaseAfterTocks, 1, 1e9);\r\n      this.getTicksOnReset = getParamValue(parameters.ticksOnReset, -1e9, 1e9);\r\n      this.getTocksOnReset = getParamValue(parameters.tocksOnReset, -1e9, 1e9);\r\n\r\n      for (let sampleIndex = 0; sampleIndex < output[0].length; sampleIndex++) {\r\n        const clockTriggerValue = this.getClockTriggerValue(sampleIndex);\r\n        const resetTriggerValue = this.getResetTriggerValue(sampleIndex);\r\n        let clockTriggerStage;\r\n        if (clockTriggerValue > 0) {\r\n          if (this.clockTriggerOn) {\r\n            clockTriggerStage = clockInTriggerStages.high;\r\n          } else {\r\n            clockTriggerStage = clockInTriggerStages.attack;\r\n            this.clockTriggerChangeMessage.value = true;\r\n            this.port.postMessage(this.clockTriggerChangeMessage);\r\n          }\r\n          this.clockTriggerOn = true;\r\n        } else {\r\n          if (this.clockTriggerOn) {\r\n            clockTriggerStage = clockInTriggerStages.release;\r\n            this.clockTriggerChangeMessage.value = false;\r\n            this.port.postMessage(this.clockTriggerChangeMessage);\r\n          } else {\r\n            clockTriggerStage = clockInTriggerStages.low;\r\n          }\r\n          this.clockTriggerOn = false;\r\n        }\r\n        let resetTriggerStage = resetTriggerStages.keepGoing;\r\n\r\n        if (this.resetTriggerOn !== resetTriggerValue > 0) {\r\n          this.resetTriggerChangeMessage.value = resetTriggerValue > 0;\r\n          this.port.postMessage(this.resetTriggerChangeMessage);\r\n        }\r\n        if (resetTriggerValue > 0 && !this.resetTriggerOn) {\r\n          resetTriggerStage = resetTriggerStages.reset;\r\n        }\r\n        this.resetTriggerOn = resetTriggerValue > 0;\r\n\r\n        this.userParams.attackAfterTicks = this.getAttackAfterTicks(sampleIndex);\r\n        this.userParams.releaseAfterTocks = this.getReleaseAfterTocks(sampleIndex);\r\n        this.userParams.ticksOnReset = this.getTicksOnReset(sampleIndex);\r\n        this.userParams.tocksOnReset = this.getTocksOnReset(sampleIndex);\r\n\r\n        // mutates this.state\r\n        divideClockTicks(this.state, this.userParams, clockTriggerStage, resetTriggerStage);\r\n        // only expecting one channel, but tolerating more in case\r\n        for (let channelIndex = 0; channelIndex < output.length; channelIndex++) {\r\n          const outputChannel = output[channelIndex];\r\n\r\n          outputChannel[sampleIndex] = this.state.stage;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n);\r\n"],"sourceRoot":""}