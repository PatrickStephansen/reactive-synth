{"version":3,"file":"worklets.23c145bb95d0836f1615.js","mappings":"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","sources":["webpack://reactive-synth/../reactive-synth-envelope-generator/worklet/envelope-generator.js","webpack://reactive-synth/../reactive-synth-clock-divider/worklet/clock-divider.js","webpack://reactive-synth/../reactive-synth-noise-generator/worklet/noise-generator.js","webpack://reactive-synth/../reactive-synth-bitcrusher/worklet/bitcrusher.js","webpack://reactive-synth/../reactive-synth-inverse-gain/worklet/inverse-gain.js"],"sourcesContent":["const bytesPerMemorySlot = Float32Array.BYTES_PER_ELEMENT;\nconst renderQuantumSampleCount = 128;\n\nconst stageNames = {\n\t0: \"rest\",\n\t1: \"attack\",\n\t2: \"hold\",\n\t3: \"decay\",\n\t4: \"sustain\",\n\t5: \"release\",\n};\n\nregisterProcessor(\n\t\"reactive-synth-envelope-generator\",\n\tclass EnvelopeGenerator extends AudioWorkletProcessor {\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tname: \"trigger\",\n\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"attackValue\",\n\t\t\t\t\tdefaultValue: 1,\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"attackTime\",\n\t\t\t\t\tdefaultValue: 0.001,\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 10,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"holdTime\",\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tdefaultValue: 0.0625,\n\t\t\t\t\tmaxValue: 10,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"decayTime\",\n\t\t\t\t\tdefaultValue: 0.125,\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 10,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"sustainValue\",\n\t\t\t\t\tdefaultValue: 0.25,\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"releaseTime\",\n\t\t\t\t\tdefaultValue: 0.25,\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 10,\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.port.onmessage = this.handleMessage.bind(this);\n\t\t\tthis.sampleRate = options.sampleRate || 44100;\n\t\t\tthis.triggerChangeMessage = { type: \"trigger-change\", value: false };\n\t\t\tthis.stateMessage = {\n\t\t\t\ttype: \"state\",\n\t\t\t\tstate: {\n\t\t\t\t\tstage: \"rest\",\n\t\t\t\t\tstageProgress: 0,\n\t\t\t\t\toutputValue: 0,\n\t\t\t\t},\n\t\t\t};\n\t\t\tthis.manualTriggerOn = false;\n\t\t\tthis.manualTriggerOnParameter = [1];\n\t\t}\n\n\t\thandleMessage(event) {\n\t\t\tif (event.data && event.data.type === \"get-state\") {\n\t\t\t\tif (this.wasmModule){\n\t\t\t\t\tthis.wasmModule.exports.publish_state(this.internalProcessorPtr);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (event.data && event.data.type === \"manual-trigger\") {\n\t\t\t\tthis.manualTriggerOn = event.data.value;\n\t\t\t}\n\t\t\tif (event.data && event.data.type === \"wasm\") {\n\t\t\t\tthis.initWasmModule(event.data.wasmModule).then(() =>\n\t\t\t\t\tthis.port.postMessage({ type: \"module-ready\", value: true })\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tasync initWasmModule(wasmModule) {\n\t\t\twasmModule = await WebAssembly.compile(wasmModule);\n\t\t\tthis.wasmModule = await WebAssembly.instantiate(wasmModule, {\n\t\t\t\timports: {\n\t\t\t\t\ttriggerChange: (t) => {\n\t\t\t\t\t\tthis.triggerChangeMessage.value = t;\n\t\t\t\t\t\tthis.port.postMessage(this.triggerChangeMessage);\n\t\t\t\t\t},\n\t\t\t\t\tshareState: (\n\t\t\t\t\t\tstage,\n\t\t\t\t\t\tstageProgress,\n\t\t\t\t\t\toutputValue,\n\t\t\t\t\t\tattackValue,\n\t\t\t\t\t\tattackTime,\n\t\t\t\t\t\tholdTime,\n\t\t\t\t\t\tdecayTime,\n\t\t\t\t\t\tsustainValue,\n\t\t\t\t\t\treleaseTime\n\t\t\t\t\t) => {\n\t\t\t\t\t\tthis.stateMessage.state.stage = stageNames[stage];\n\t\t\t\t\t\tthis.stateMessage.state.stageProgress = stageProgress;\n\t\t\t\t\t\tthis.stateMessage.state.outputValue = outputValue;\n\t\t\t\t\t\tthis.stateMessage.state.parameters = {\n\t\t\t\t\t\t\tattackValue,\n\t\t\t\t\t\t\tattackTime,\n\t\t\t\t\t\t\tholdTime,\n\t\t\t\t\t\t\tdecayTime,\n\t\t\t\t\t\t\tsustainValue,\n\t\t\t\t\t\t\treleaseTime,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.port.postMessage(this.stateMessage);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis.internalProcessorPtr = this.wasmModule.exports.init(\n\t\t\t\trenderQuantumSampleCount,\n\t\t\t\tthis.sampleRate\n\t\t\t);\n\t\t\tthis.float32WasmMemory = new Float32Array(\n\t\t\t\tthis.wasmModule.exports.memory.buffer\n\t\t\t);\n\t\t}\n\n\t\tprocess(_inputs, outputs, parameters) {\n\t\t\tif (this.wasmModule) {\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tthis.manualTriggerOn ? this.manualTriggerOnParameter : parameters.trigger,\n\t\t\t\t\tthis.wasmModule.exports.get_input_gate_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.attackValue,\n\t\t\t\t\tthis.wasmModule.exports.get_attack_value_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.attackTime,\n\t\t\t\t\tthis.wasmModule.exports.get_attack_time_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.holdTime,\n\t\t\t\t\tthis.wasmModule.exports.get_hold_time_ptr(this.internalProcessorPtr) /\n\t\t\t\t\t\tbytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.decayTime,\n\t\t\t\t\tthis.wasmModule.exports.get_decay_time_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.sustainValue,\n\t\t\t\t\tthis.wasmModule.exports.get_sustain_value_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.releaseTime,\n\t\t\t\t\tthis.wasmModule.exports.get_release_time_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tconst outputPointer =\n\t\t\t\t\tthis.wasmModule.exports.process_quantum(\n\t\t\t\t\t\tthis.internalProcessorPtr,\n\t\t\t\t\t\tthis.manualTriggerOn\n\t\t\t\t\t\t\t? this.manualTriggerOnParameter.length\n\t\t\t\t\t\t\t: parameters.trigger.length,\n\t\t\t\t\t\tparameters.attackValue.length,\n\t\t\t\t\t\tparameters.attackTime.length,\n\t\t\t\t\t\tparameters.holdTime.length,\n\t\t\t\t\t\tparameters.decayTime.length,\n\t\t\t\t\t\tparameters.sustainValue.length,\n\t\t\t\t\t\tparameters.releaseTime.length\n\t\t\t\t\t) / bytesPerMemorySlot;\n\n\t\t\t\tfor (\n\t\t\t\t\tlet channelIndex = 0;\n\t\t\t\t\tchannelIndex < outputs[0].length;\n\t\t\t\t\tchannelIndex++\n\t\t\t\t) {\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet sample = 0;\n\t\t\t\t\t\tsample < outputs[0][channelIndex].length;\n\t\t\t\t\t\tsample++\n\t\t\t\t\t) {\n\t\t\t\t\t\toutputs[0][channelIndex][sample] = this.float32WasmMemory[\n\t\t\t\t\t\t\toutputPointer + sample\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n);\n","const bytesPerMemorySlot = Float32Array.BYTES_PER_ELEMENT;\nconst renderQuantumSampleCount = 128;\n\nregisterProcessor(\n\t\"reactive-synth-clock-divider\",\n\tclass ClockDivider extends AudioWorkletProcessor {\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tname: \"clockTrigger\",\n\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"resetTrigger\",\n\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"attackAfterTicks\",\n\t\t\t\t\tdefaultValue: 1,\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 1e9,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"releaseAfterTocks\",\n\t\t\t\t\tdefaultValue: 1,\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 1e9,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"ticksOnReset\",\n\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\tminValue: -1e9,\n\t\t\t\t\tmaxValue: 1e9,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"tocksOnReset\",\n\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\tminValue: -1e9,\n\t\t\t\t\tmaxValue: 1e9,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.port.onmessage = this.handleMessage.bind(this);\n\t\t\tthis.clockTriggerChangeMessage = {\n\t\t\t\ttype: \"clock-trigger-change\",\n\t\t\t\tvalue: false,\n\t\t\t};\n\t\t\tthis.resetTriggerChangeMessage = {\n\t\t\t\ttype: \"reset-trigger-change\",\n\t\t\t\tvalue: false,\n\t\t\t};\n\t\t\tthis.manualClockTriggerOn = false;\n\t\t\tthis.manualResetTriggerOn = false;\n\t\t\tthis.initialReset = true;\n\t\t\tthis.manualTriggerOnParameter = [1];\n\t\t}\n\n\t\thandleMessage(event) {\n\t\t\tif (event.data && event.data.type === \"manual-clock-trigger\") {\n\t\t\t\tthis.manualClockTriggerOn = event.data.value;\n\t\t\t}\n\t\t\tif (event.data && event.data.type === \"manual-reset-trigger\") {\n\t\t\t\tthis.manualResetTriggerOn = event.data.value;\n\t\t\t}\n\t\t\tif (event.data && event.data.type === \"wasm\") {\n\t\t\t\tthis.initWasmModule(event.data.wasmModule).then(() =>\n\t\t\t\t\tthis.port.postMessage({ type: \"module-ready\", value: true })\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tasync initWasmModule(wasmModule) {\n\t\t\twasmModule = await WebAssembly.compile(wasmModule);\n\t\t\tthis.wasmModule = await WebAssembly.instantiate(wasmModule, {\n\t\t\t\timports: {\n\t\t\t\t\tclockChange: (t) => {\n\t\t\t\t\t\tthis.clockTriggerChangeMessage.value = t;\n\t\t\t\t\t\tthis.port.postMessage(this.clockTriggerChangeMessage);\n\t\t\t\t\t},\n\t\t\t\t\tresetChange: (t) => {\n\t\t\t\t\t\tthis.resetTriggerChangeMessage.value = t;\n\t\t\t\t\t\tthis.port.postMessage(this.resetTriggerChangeMessage);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis.internalProcessorPtr = this.wasmModule.exports.init(\n\t\t\t\trenderQuantumSampleCount\n\t\t\t);\n\t\t\tthis.float32WasmMemory = new Float32Array(\n\t\t\t\tthis.wasmModule.exports.memory.buffer\n\t\t\t);\n\t\t}\n\n\t\tprocess(_inputs, outputs, parameters) {\n\t\t\tif (this.wasmModule) {\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tthis.manualClockTriggerOn\n\t\t\t\t\t\t? this.manualTriggerOnParameter\n\t\t\t\t\t\t: parameters.clockTrigger,\n\t\t\t\t\tthis.wasmModule.exports.get_clock_gate_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tthis.manualResetTriggerOn || this.initialReset\n\t\t\t\t\t\t? this.manualTriggerOnParameter\n\t\t\t\t\t\t: parameters.resetTrigger,\n\t\t\t\t\tthis.wasmModule.exports.get_reset_gate_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.attackAfterTicks,\n\t\t\t\t\tthis.wasmModule.exports.get_open_after_ticks_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.releaseAfterTocks,\n\t\t\t\t\tthis.wasmModule.exports.get_close_after_tocks_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.ticksOnReset,\n\t\t\t\t\tthis.wasmModule.exports.get_ticks_on_reset_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.tocksOnReset,\n\t\t\t\t\tthis.wasmModule.exports.get_tocks_on_reset_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tconst outputPointer =\n\t\t\t\t\tthis.wasmModule.exports.process_quantum(\n\t\t\t\t\t\tthis.internalProcessorPtr,\n\t\t\t\t\t\tthis.manualClockTriggerOn\n\t\t\t\t\t\t\t? this.manualTriggerOnParameter.length\n\t\t\t\t\t\t\t: parameters.clockTrigger.length,\n\t\t\t\t\t\tthis.manualResetTriggerOn || this.initialReset\n\t\t\t\t\t\t\t? this.manualTriggerOnParameter.length\n\t\t\t\t\t\t\t: parameters.resetTrigger.length,\n\t\t\t\t\t\tparameters.attackAfterTicks.length,\n\t\t\t\t\t\tparameters.releaseAfterTocks.length,\n\t\t\t\t\t\tparameters.ticksOnReset.length,\n\t\t\t\t\t\tparameters.tocksOnReset.length\n\t\t\t\t\t) / bytesPerMemorySlot;\n\t\t\t\tif (this.initialReset) {\n\t\t\t\t\tthis.initialReset = false;\n\t\t\t\t}\n\n\t\t\t\tfor (\n\t\t\t\t\tlet channelIndex = 0;\n\t\t\t\t\tchannelIndex < outputs[0].length;\n\t\t\t\t\tchannelIndex++\n\t\t\t\t) {\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet sample = 0;\n\t\t\t\t\t\tsample < outputs[0][channelIndex].length;\n\t\t\t\t\t\tsample++\n\t\t\t\t\t) {\n\t\t\t\t\t\toutputs[0][channelIndex][sample] = this.float32WasmMemory[\n\t\t\t\t\t\t\toutputPointer + sample\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n);\n","const bytesPerMemorySlot = 32 / 8;\n\nregisterProcessor(\n\t\"reactive-synth-noise-generator\",\n\tclass NoiseGenerator extends AudioWorkletProcessor {\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tname: \"stepMax\",\n\t\t\t\t\tdefaultValue: 1,\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"stepMin\",\n\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"sampleHold\",\n\t\t\t\t\tdefaultValue: 1,\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1000000,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"nextValueTrigger\",\n\t\t\t\t\tdefaultValue: 0,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.port.onmessage = this.handleMessage.bind(this);\n\t\t\tthis.triggerChangeMessage = { type: \"trigger-change\", value: false };\n\t\t\tthis.manualTriggerOn = false;\n\t\t\tthis.manualTriggerOnParameter = [1];\n\t\t}\n\n\t\thandleMessage(event) {\n\t\t\tif (event.data && event.data.type === \"manual-trigger\") {\n\t\t\t\tthis.manualTriggerOn = event.data.value;\n\t\t\t}\n\t\t\tif (event.data && event.data.type === \"wasm\") {\n\t\t\t\tthis.initWasmModule(event.data.wasmModule).then(() =>\n\t\t\t\t\tthis.port.postMessage({ type: \"module-ready\", value: true })\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tasync initWasmModule(wasmModule) {\n\t\t\twasmModule = await WebAssembly.compile(wasmModule);\n\t\t\tthis.wasmModule = await WebAssembly.instantiate(wasmModule, {\n\t\t\t\timports: {\n\t\t\t\t\tchange: (b) => {\n\t\t\t\t\t\tthis.triggerChangeMessage.value = b;\n\t\t\t\t\t\tthis.port.postMessage(this.triggerChangeMessage);\n\t\t\t\t\t},\n\t\t\t\t\trandom: Math.random,\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis.internalProcessorPtr = this.wasmModule.exports.init(128);\n\t\t\tthis.float32WasmMemory = new Float32Array(\n\t\t\t\tthis.wasmModule.exports.memory.buffer\n\t\t\t);\n\t\t}\n\n\t\tprocess(_inputs, outputs, parameters) {\n\t\t\tif (this.wasmModule) {\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.stepMin,\n\t\t\t\t\tthis.wasmModule.exports.get_step_minimum_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.stepMax,\n\t\t\t\t\tthis.wasmModule.exports.get_step_maximum_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.sampleHold,\n\t\t\t\t\tthis.wasmModule.exports.get_sample_hold_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tthis.manualTriggerOn\n\t\t\t\t\t\t? this.manualTriggerOnParameter\n\t\t\t\t\t\t: parameters.nextValueTrigger,\n\t\t\t\t\tthis.wasmModule.exports.get_next_value_trigger_ptr(\n\t\t\t\t\t\tthis.internalProcessorPtr\n\t\t\t\t\t) / bytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tconst outputPointer =\n\t\t\t\t\tthis.wasmModule.exports.process_quantum(\n\t\t\t\t\t\tthis.internalProcessorPtr,\n\t\t\t\t\t\tparameters.stepMin.length,\n\t\t\t\t\t\tparameters.stepMax.length,\n\t\t\t\t\t\tparameters.sampleHold.length,\n\t\t\t\t\t\tthis.manualTriggerOn\n\t\t\t\t\t\t\t? this.manualTriggerOnParameter.length\n\t\t\t\t\t\t\t: parameters.nextValueTrigger.length\n\t\t\t\t\t) / bytesPerMemorySlot;\n\t\t\t\tfor (\n\t\t\t\t\tlet channelIndex = 0;\n\t\t\t\t\tchannelIndex < outputs[0].length;\n\t\t\t\t\tchannelIndex++\n\t\t\t\t) {\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet sample = 0;\n\t\t\t\t\t\tsample < outputs[0][channelIndex].length;\n\t\t\t\t\t\tsample++\n\t\t\t\t\t) {\n\t\t\t\t\t\toutputs[0][channelIndex][sample] =\n\t\t\t\t\t\t\tthis.float32WasmMemory[outputPointer + sample];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n);\n","const bytesPerMemorySlot = 32 / 8;\n\nregisterProcessor(\n\t\"reactive-synth-bitcrusher\",\n\tclass Bitcrusher extends AudioWorkletProcessor {\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tname: \"bitDepth\",\n\t\t\t\t\tdefaultValue: 8,\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 32,\n\t\t\t\t\tautomationRate: \"a-rate\",\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.fractionalBitDepthMode = \"quantize-evenly\";\n\t\t\tthis.port.onmessage = this.handleMessage.bind(this);\n\t\t\tthis.fractionalBitDepthModes = {\n\t\t\t\ttrve: 0,\n\t\t\t\t\"quantize-evenly\": 1,\n\t\t\t\tcontinuous: 2,\n\t\t\t};\n\t\t}\n\n\t\thandleMessage(event) {\n\t\t\tif (\n\t\t\t\tevent.data &&\n\t\t\t\tevent.data.type === \"change-fractional-bit-depth-mode\"\n\t\t\t) {\n\t\t\t\tthis.fractionalBitDepthMode = event.data.newMode;\n\t\t\t\tthis.wasmModule.exports.set_mode(\n\t\t\t\t\tthis.internalProcessorPtr,\n\t\t\t\t\tthis.fractionalBitDepthModes[this.fractionalBitDepthMode]\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (event.data && event.data.type === \"wasm\") {\n\t\t\t\tthis.initWasmModule(event.data.wasmModule).then(() =>\n\t\t\t\t\tthis.port.postMessage({ type: \"module-ready\", value: true })\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tasync initWasmModule(wasmModule) {\n\t\t\twasmModule = await WebAssembly.compile(wasmModule);\n\t\t\tthis.wasmModule = await WebAssembly.instantiate(wasmModule, {});\n\t\t\tthis.internalProcessorPtr = this.wasmModule.exports.init(\n\t\t\t\t128,\n\t\t\t\tthis.fractionalBitDepthModes[this.fractionalBitDepthMode]\n\t\t\t);\n\t\t\tthis.float32WasmMemory = new Float32Array(\n\t\t\t\tthis.wasmModule.exports.memory.buffer\n\t\t\t);\n\t\t}\n\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\t// only process once wasm module ready and input plugged in\n\t\t\tif (inputs[0] && inputs[0][0] && inputs[0][0].length && this.wasmModule) {\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tinputs[0][0],\n\t\t\t\t\tthis.wasmModule.exports.get_input_ptr(this.internalProcessorPtr) /\n\t\t\t\t\t\tbytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tthis.float32WasmMemory.set(\n\t\t\t\t\tparameters.bitDepth,\n\t\t\t\t\tthis.wasmModule.exports.get_bit_depth_ptr(this.internalProcessorPtr) /\n\t\t\t\t\t\tbytesPerMemorySlot\n\t\t\t\t);\n\t\t\t\tconst outputPointer =\n\t\t\t\t\tthis.wasmModule.exports.process_quantum(\n\t\t\t\t\t\tthis.internalProcessorPtr,\n\t\t\t\t\t\tinputs[0][0].length,\n\t\t\t\t\t\tparameters.bitDepth.length\n\t\t\t\t\t) / bytesPerMemorySlot;\n\t\t\t\t// expect mono input and output, but deal with more channels without falling over (only first input channel used)\n\t\t\t\tfor (\n\t\t\t\t\tlet channelIndex = 0;\n\t\t\t\t\tchannelIndex < outputs[0].length;\n\t\t\t\t\tchannelIndex++\n\t\t\t\t) {\n\t\t\t\t\tfor (\n\t\t\t\t\t\tlet sample = 0;\n\t\t\t\t\t\tsample < outputs[0][channelIndex].length;\n\t\t\t\t\t\tsample++\n\t\t\t\t\t) {\n\t\t\t\t\t\toutputs[0][channelIndex][sample] = this.float32WasmMemory[\n\t\t\t\t\t\t\toutputPointer + sample\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// browsers don't conform to the spec, so always return true or the module will be silent forever\n\t\t\treturn true;\n\t\t}\n\t}\n);\n","const defaultMin = -1e9;\nconst defaultMax = 1e9;\nconst bytesPerSample = 4;\n\nregisterProcessor(\n  \"reactive-synth-inverse-gain\",\n  class InverseGain extends AudioWorkletProcessor {\n    static get parameterDescriptors() {\n      return [\n        {\n          name: \"divisor\",\n          defaultValue: 10,\n          automationRate: \"a-rate\",\n        },\n        {\n          name: \"zeroDivisorFallback\",\n          defaultValue: 0,\n          automationRate: \"a-rate\",\n        },\n      ];\n    }\n\n    constructor() {\n      super();\n      this.defaultInput = [0];\n      this.port.onmessage = (event) => {\n        if (event.data.type === \"wasm\") {\n          this.initWasmModule(event.data.wasmModule).then(() =>\n            this.port.postMessage({ type: \"module-ready\", value: true })\n          );\n        }\n      };\n    }\n\n    async initWasmModule(wasmModule) {\n      wasmModule = await WebAssembly.compile(wasmModule);\n      this.wasmModule = await WebAssembly.instantiate(wasmModule, {});\n      this.internalProcessorPtr = this.wasmModule.exports.init(\n        defaultMin,\n        defaultMax,\n        defaultMin,\n        defaultMax,\n        defaultMin,\n        defaultMax\n      );\n      this.float32WasmMemory = new Float32Array(\n        this.wasmModule.exports.memory.buffer\n      );\n    }\n\n    process(inputs, outputs, parameters) {\n      if (this.wasmModule) {\n        this.float32WasmMemory.set(\n          (inputs && inputs[0] && inputs[0][0]) || this.defaultInput,\n          this.wasmModule.exports.get_quotient_ptr(this.internalProcessorPtr) /\n            bytesPerSample\n        );\n        this.float32WasmMemory.set(\n          parameters.divisor,\n          this.wasmModule.exports.get_divisor_ptr(this.internalProcessorPtr) /\n            bytesPerSample\n        );\n        this.float32WasmMemory.set(\n          parameters.zeroDivisorFallback,\n          this.wasmModule.exports.get_divisor_fallback_ptr(\n            this.internalProcessorPtr\n          ) / bytesPerSample\n        );\n        const outputPointer =\n          this.wasmModule.exports.process_quantum(\n            this.internalProcessorPtr,\n            ((inputs && inputs[0] && inputs[0][0]) || this.defaultInput).length,\n            parameters.divisor.length,\n            parameters.zeroDivisorFallback.length\n          ) / bytesPerSample;\n        for (\n          let channelIndex = 0;\n          channelIndex < outputs[0].length;\n          channelIndex++\n        ) {\n          // TODO: can this not be done with some array util that's faster?\n          for (\n            let sample = 0;\n            sample < outputs[0][channelIndex].length;\n            sample++\n          ) {\n            outputs[0][channelIndex][sample] = this.float32WasmMemory[\n              outputPointer + sample\n            ];\n          }\n        }\n      }\n      return true;\n    }\n  }\n);\n"],"names":["bytesPerMemorySlot","Float32Array","BYTES_PER_ELEMENT","stageNames","registerProcessor","AudioWorkletProcessor","parameterDescriptors","name","defaultValue","automationRate","minValue","maxValue","constructor","options","super","this","port","onmessage","handleMessage","bind","sampleRate","triggerChangeMessage","type","value","stateMessage","state","stage","stageProgress","outputValue","manualTriggerOn","manualTriggerOnParameter","event","data","wasmModule","exports","publish_state","internalProcessorPtr","initWasmModule","then","postMessage","async","WebAssembly","compile","instantiate","imports","triggerChange","t","shareState","attackValue","attackTime","holdTime","decayTime","sustainValue","releaseTime","parameters","init","float32WasmMemory","memory","buffer","process","_inputs","outputs","set","trigger","get_input_gate_ptr","get_attack_value_ptr","get_attack_time_ptr","get_hold_time_ptr","get_decay_time_ptr","get_sustain_value_ptr","get_release_time_ptr","outputPointer","process_quantum","length","channelIndex","sample","clockTriggerChangeMessage","resetTriggerChangeMessage","manualClockTriggerOn","manualResetTriggerOn","initialReset","clockChange","resetChange","clockTrigger","get_clock_gate_ptr","resetTrigger","get_reset_gate_ptr","attackAfterTicks","get_open_after_ticks_ptr","releaseAfterTocks","get_close_after_tocks_ptr","ticksOnReset","get_ticks_on_reset_ptr","tocksOnReset","get_tocks_on_reset_ptr","change","b","random","Math","stepMin","get_step_minimum_ptr","stepMax","get_step_maximum_ptr","sampleHold","get_sample_hold_ptr","nextValueTrigger","get_next_value_trigger_ptr","fractionalBitDepthMode","fractionalBitDepthModes","trve","continuous","newMode","set_mode","inputs","get_input_ptr","bitDepth","get_bit_depth_ptr","defaultMin","defaultMax","defaultInput","get_quotient_ptr","divisor","get_divisor_ptr","zeroDivisorFallback","get_divisor_fallback_ptr"],"sourceRoot":""}