!function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./assets/audio-worklet-processors",r(r.s=0)}([function(e,t,r){r(2),r(3),e.exports=r(1)},function(e,t){registerProcessor("inverse-gain",class extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"divisor",defaultValue:10,automationRate:"a-rate"},{name:"zeroDivisorFallback",defaultValue:0,automationRate:"a-rate"}]}process(e,t,r){let n=e[0],a=t[0],o=r.divisor,u=o.length>1?e=>o[e]:()=>o[0],i=r.zeroDivisorFallback.length>1?e=>r.zeroDivisorFallback[e]:()=>r.zeroDivisorFallback[0];for(let e=0;e<n.length;e++){const t=n[e],r=a[e];for(let e=0;e<t.length;e++){const n=t[e],a=u(e);r[e]=0===a?i(e):n/a}}return!0}})},function(e,t,r){"use strict";function n(e){return null!=e&&"object"==typeof e&&!0===e["@@functional/placeholder"]}function a(e){return function t(r){return 0===arguments.length||n(r)?t:e.apply(this,arguments)}}function o(e){return function t(r,o){switch(arguments.length){case 0:return t;case 1:return n(r)?t:a(function(t){return e(r,t)});default:return n(r)&&n(o)?t:n(r)?a(function(t){return e(t,o)}):n(o)?a(function(t){return e(r,t)}):e(r,o)}}}function u(e){return function t(r,u,i){switch(arguments.length){case 0:return t;case 1:return n(r)?t:o(function(t,n){return e(r,t,n)});case 2:return n(r)&&n(u)?t:n(r)?o(function(t,r){return e(t,u,r)}):n(u)?o(function(t,n){return e(r,t,n)}):a(function(t){return e(r,u,t)});default:return n(r)&&n(u)&&n(i)?t:n(r)&&n(u)?o(function(t,r){return e(t,r,i)}):n(r)&&n(i)?o(function(t,r){return e(t,u,r)}):n(u)&&n(i)?o(function(t,n){return e(r,t,n)}):n(r)?a(function(t){return e(t,u,i)}):n(u)?a(function(t){return e(r,t,i)}):n(i)?a(function(t){return e(r,u,t)}):e(r,u,i)}}}r.r(t);var i=u(function(e,t,r){if(e>t)throw new Error("min must not be greater than max in clamp(min, max, value)");return r<e?e:r>t?t:r});const s=i(0,1),l=i(0,1e6),c=i(0,1),f=(e,t,r)=>{const n=Math.random()*(r-t)+t;return Math.random()>.5?e+n>1?e-n:e+n:e-n<-1?e+n:e-n};registerProcessor("noise",class extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"stepMax",defaultValue:1,minValue:0,maxValue:1,automationRate:"a-rate"},{name:"stepMin",defaultValue:0,minValue:0,maxValue:1,automationRate:"a-rate"},{name:"sampleHold",defaultValue:1,minValue:0,maxValue:1e6,automationRate:"a-rate"},{name:"nextValueTrigger",defaultValue:0,minValue:0,maxValue:1,automationRate:"a-rate"}]}constructor(){super(),this.previousValue=.1,this.samplesHeld=0,this.isTriggerValueHigh=!1}process(e,t,r){let n=t[0],a=r.stepMin,o=a.length>1?e=>s(a[e]):()=>s(a[0]),u=r.stepMax,i=u.length>1?e=>s(u[e]):()=>s(u[0]),h=r.sampleHold,p=h.length>1?e=>l(h[e]):()=>l(h[0]),d=r.nextValueTrigger,m=d.length>1?e=>c(d[e]):()=>c(d[0]);for(let e=0;e<n[0].length;++e,++this.samplesHeld){this.samplesHeld<0&&(this.samplesHeld=0);const t=p(e);t>=1&&this.samplesHeld>=t&&(this.samplesHeld-=t,this.previousValue=f(this.previousValue,o(e),i(e))),!this.isTriggerValueHigh&&m(e)>0&&(this.previousValue=f(this.previousValue,o(e),i(e))),this.isTriggerValueHigh=m(e)>0;for(let t=0;t<n.length;++t)n[t][e]=this.previousValue}return!0}})},function(e,t,r){"use strict";function n(e,t,r){t>32&&(t=32),t<1&&(t=1),"trve"===r&&(t=Math.floor(t));let n=2**t;"quantize-evenly"===r&&(n=Math.floor(n));const a=2/n,o=1-a;return e>=o?o:e<=-1?-1:Math.floor((1+e)/a)*a-1}r.r(t),registerProcessor("bit-crusher-fixed-point",class extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"bitDepth",defaultValue:8,minValue:1,maxValue:32,automationRate:"a-rate"}]}constructor(){super(),this.fractionalBitDepthMode="quantize-evenly",this.port.onmessage=this.handleMessage.bind(this)}handleMessage(e){e.data&&"change-fractional-bit-depth-mode"===e.data.type&&(this.fractionalBitDepthMode=e.data.newMode)}process(e,t,r){let a=e[0],o=t[0],u=r.bitDepth,i=u.length>1?e=>u[e]:()=>u[0];for(let e=0;e<a.length;e++){const t=a[e],r=o[e];for(let e=0;e<t.length;e++){const a=t[e];r[e]=n(a,i(e),this.fractionalBitDepthMode)}}return!0}})}]);